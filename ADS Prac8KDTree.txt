//AIM--Implement Construction of KD Tree of following 2D Points--(Points given in class)

package ads_prac8;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ADS_prac8 
{
    
    public static void main(String[] args) 
    {
        Node root=null;
        int points[][] = {
                            {3, 6}, 
                            {17, 15}, 
                            {13, 15}, 
                            {6, 12}, 
                            {9, 1}, 
                            {2, 7}, 
                            {10, 19}
                        };
        
        KD_Tree k=new KD_Tree();
        
        for (int i=0; i<points.length; i++) 
            root = k.insert(root, points[i]); 
        
        System.out.println("Inorder:");
        k.inorder(root);
        System.out.println("Postorder:");
        k.postorder(root);
    }
    
    
    
}


class KD_Tree
{
    int k=2;
    
    void postorder(Node node)
    {
        if(node==null)
            return;
        postorder(node.left);
        postorder(node.right);
        System.out.println(node.points[0]+","+node.points[1]);
    }
    
    void inorder(Node node)
    {
        if(node==null)
            return;
        inorder(node.left);
        System.out.println(node.points[0]+","+node.points[1]);
        inorder(node.right);
    }
    
    void preorder(Node node)
    {
        if(node==null)
            return;
        System.out.println(node.points[0]+","+node.points[1]);
        preorder(node.left);
        preorder(node.right);
    }    
    
    public Node insert(Node root, int point[])
    {
        return insertRec(root, point, 0);
    }
    
    public Node insertRec(Node root, int point[], int depth) 
    { 
        // Tree is empty? 
        if (root == null) 
        {
            return newNode(point);
        } 

        // Calculate current dimension (cd) of comparison 
        int cd = depth % k; 

        // Compare the new point with root on current dimension 'cd' 
        // and decide the left or right subtree 
        if (point[cd] < (root.points[cd])) 
            root.left  = insertRec(root.left, point, depth + 1); 
        else
            root.right = insertRec(root.right, point, depth + 1); 

        return root; 
    }  
    
    
    public Node newNode(int arr[])
    {
        Node n=new Node();
        
        n.points=arr;
        n.left=n.right=null;
        return n;
    }
    
}

class Node
{
    int k;
    int[] points;
    Node left,right;
}


==========================================

o/p:

Inorder:
2,7
3,6
6,12
9,1
17,15
10,19
13,15
Postorder:
2,7
9,1
6,12
10,19
13,15
17,15
3,6