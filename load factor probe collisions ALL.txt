package advanced.data.structures;
import java.util.Random;
class prac2
{
    int data[], hash[], h,x,f,lp[],qp[],dh[], probe;
    public void init()
    {
        hash = new int[data.length];
        lp = new int[data.length];
        qp = new int[data.length];
        dh = new int[data.length];
        for(int i=0;i<hash.length;i++)
        {
            hash[i] = -1;
            lp[i] = 0;
            qp[i] = 0;
            dh[i] = 0;
        }
    }
    public void linearprobing()
    {
        init();
        for(int i=0;i<data.length;i++)
        {
            if(data[i]!=999)
            {
                x = data[i];
                probe = 1;
                for(int j=0; j<data.length; j++)
                {
                    f = j;
                    h = (x+f)%data.length;
                    if(hash[h]==-1)
                    {
                        hash[h] = x;
                        lp[h] = probe;
                        break;
                    }
                    probe++;
                }
            }
        }
        System.out.println("\nHash table with linear probing:");
        for(int i=0; i<hash.length; i++)
            System.out.println(hash[i]+"\t"+lp[i]);
    }
    public void quadraticprobing()
    {
        init();
        for(int i=0;i<data.length;i++)
        {
            if(data[i]!=999)
            {
                x = data[i];
                probe = 1;
                for(int j=0; j<data.length; j++)
                {
                    f = j*j;
                    h = (x+f)%data.length;
                    if(hash[h]==-1)
                    {
                        hash[h] = x;
                        qp[h] = probe;
                        break;
                    }
                    probe++;
                }
            }
        }
        System.out.println("Hash table with quadratic probing:");
        for(int i=0; i<hash.length; i++)
            System.out.println(hash[i]+"\t"+qp[i]);
    }
    public void doublehashing()
    {
        init();
        int p = prime(hash.length);
        for(int i=0;i<data.length;i++)
        {
            if(data[i]!=999)
            {
                x = data[i];
                probe = 1;
                for(int j=0; j<data.length; j++)
                {
                    f = j*(p-(x%p));
                    h = (x+f)%data.length;
                    if(hash[h]==-1)
                    {
                        hash[h] = x;
                        dh[h] = probe;
                        break;
                    }
                    probe++;
                }
            }
        }
        System.out.println("Hash table with double hashing:");
        for(int i=0; i<hash.length; i++)
            System.out.println(hash[i]+"\t"+dh[i]);
    }
    public void print()
    {
        for(int i=0; i<hash.length; i++)
            System.out.println(hash[i]);
    }
    public int prime(int s)
    {
        for(int i=s-1;i>1;i--)
        {
            int num = i;
            boolean flag = false;
            for(int j = 2; j <= num/2; ++j)
            {
                if(num % j == 0)
                {
                    flag = true;
                    break;
                }
            }
            if (!flag)
                return num;
        }
        return 2;
    }
}
public class Test2
{
    public static void main(String[] args)
    {
        prac2 p = new prac2();
        p.data = new int[30];
        Random random = new Random();
        for(int i=0; i<30; i++)
        {
            p.data[i] = random.nextInt(29);
            System.out.print(p.data[i]+" ");
        }
        p.linearprobing();
        p.quadraticprobing();
        p.doublehashing();
    }
}
