import java.util.Scanner;
public class Iterative_Height {
  int[] array;
  Iterative_Height() {
        array = new int[100];
    }
    int hTree(int i) {
        if (array[i] != -1) {
            if (array[2 * i] == -1 && array[2 * i + 1] == -1) {
                return 1;
            } else {
                int lDepth = hTree(2*i);
                int rDepth = hTree(2*i + 1);
                
                if (lDepth > rDepth)
                    return (1 + lDepth);
                else
                    return (1 + rDepth);
            }
        }
        return 0;
    }

    int hLeaf(int j) {
        if (array[j] == -1 || (array[2 * j] == -1 && array[2 * j + 1] == -1)) {
            return 0;
        } else {
            return (1 + hLeaf(2 * j) + hLeaf(2 * j + 1));
        }
    }

    public static void main(String[] args) {
        int k, l;
        double d;
        int flag = 0;
        int height = 1;
        Scanner sc = new Scanner(System.in);

        int[] array = new int[100];
        int count = 0;

        for (int i = 0; i < 100; i++) {
            array[i] = -1;
        }

        System.out.print("Enter the total number of elements to be entered : ");
        int total = sc.nextInt();
        System.out.println("Enter the elements of the tree : ");
        for(int i=1;i<=total;i++) {
            array[i] = sc.nextInt();
        }

        for (int j = 1; j<=total; j++) {
            if (array[2 * j] != -1 || array[2 * j + 1] != -1) {
                count++;
            }
        }

        for (l = 2; l <=total; l++) {
            flag = 0;
            d = l;
            for (k = (int) Math.pow(2.0, d - 1); k < (int) Math.pow(2.0, d) - 1; k++) {
                if (array[k] != -1) {
                    flag = 1;
                }
            }
            if (flag == 1) {
                height++;
            } else {
                break;
            }
        }
        System.out.println("Non Leaf Nodes (Iterative) : " + count);
        System.out.println("Leaf Nodes (Iterative) : " + (total - count));
        System.out.println("Height (Iterative) : " + height);

                
    }
}
